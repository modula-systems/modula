{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dd286c88-ce33-4be7-8aec-3c3fe5176c40",
   "metadata": {},
   "source": [
    "# Hello, world!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "477a30ee-9242-4207-a1f7-c8e4b5c702b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training images shape: (60000, 28, 28)\n",
      "Training labels shape: (60000,)\n",
      "Test images shape: (10000, 28, 28)\n",
      "Test labels shape: (10000,)\n"
     ]
    }
   ],
   "source": [
    "from data.mnist import load_mnist\n",
    "\n",
    "# Load the MNIST dataset\n",
    "train_images, train_labels, test_images, test_labels = load_mnist()\n",
    "\n",
    "# Print shapes to verify loading\n",
    "print(f\"Training images shape: {train_images.shape}\")\n",
    "print(f\"Training labels shape: {train_labels.shape}\")\n",
    "print(f\"Test images shape: {test_images.shape}\")\n",
    "print(f\"Test labels shape: {test_labels.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7322b0da-0d22-4742-8885-69500e549774",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a figure with 5 subplots\n",
    "fig, axes = plt.subplots(1, 5, figsize=(10, 3))\n",
    "\n",
    "# Plot each image and its label\n",
    "for i in range(5):\n",
    "    axes[i].imshow(train_images[i], cmap='gray')\n",
    "    axes[i].set_title(f'Label: {train_labels[i]}')\n",
    "    axes[i].axis('off')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a7a804b-06ec-4773-864c-db8a3b01c3e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import jax\n",
    "import jax.numpy as jnp\n",
    "\n",
    "def one_hot(x, k, dtype=jnp.float32):\n",
    "    \"\"\"Create a one-hot encoding of x of size k.\"\"\"\n",
    "    return jnp.array(x[:, None] == jnp.arange(k), dtype)\n",
    "\n",
    "# Reshape images and convert labels\n",
    "X_train = train_images.reshape(train_images.shape[0], -1).T\n",
    "y_train = one_hot(train_labels, 10).T\n",
    "\n",
    "# Get a batch\n",
    "def get_batch(key, batch_size):\n",
    "    idx = jax.random.choice(key, X_train.shape[1], shape=(batch_size,))\n",
    "    return X_train[:, idx], y_train[:, idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a7a14a1b-1428-4432-8e89-6b7cfed3d765",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CompositeModule\n",
      "...consists of 3 atoms and 2 bonds\n",
      "...non-smooth\n",
      "...input sensitivity is 1\n",
      "...contributes proportion 3 to feature learning of any supermodule\n"
     ]
    }
   ],
   "source": [
    "from modula.atom import Linear\n",
    "from modula.bond import ReLU\n",
    "\n",
    "input_dim = 28 * 28\n",
    "output_dim = 10\n",
    "width = 256\n",
    "\n",
    "mlp = Linear(output_dim, width) @ ReLU() @ Linear(width, width) @ ReLU() @ Linear(width, input_dim)\n",
    "mlp.jit()\n",
    "\n",
    "print(mlp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "080bbf4f-0b73-4d6a-a3d5-f64a2875da9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ffcb6dfb74964051b04ec2f5bdde404b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loss: 0.0000:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tqdm.notebook import tqdm\n",
    "\n",
    "from modula.error import SquareError\n",
    "\n",
    "batch_size = 128\n",
    "steps = 1000\n",
    "learning_rate = 0.1\n",
    "\n",
    "error = SquareError()\n",
    "\n",
    "w = mlp.initialize(jax.random.PRNGKey(0))\n",
    "w = mlp.project(w)\n",
    "    \n",
    "progress_bar = tqdm(range(steps), desc=f\"Loss: {0:.4f}\")\n",
    "for step in progress_bar:\n",
    "    key = jax.random.PRNGKey(step)\n",
    "    inputs, targets = get_batch(key, batch_size)\n",
    "    \n",
    "    outputs, activations = mlp(inputs, w)\n",
    "    loss = error(outputs, targets)\n",
    "    error_grad = error.grad(outputs, targets)\n",
    "    grad_w, _ = mlp.backward(w, activations, error_grad)\n",
    "    d_w = mlp.dualize(grad_w)\n",
    "    w = [weight - learning_rate * d_weight for weight, d_weight in zip(w, d_w)]\n",
    "    progress_bar.set_description(f\"Loss: {loss:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9a08a8ea-d1e8-49b5-8166-05dcbde47f4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on shown samples: 5/5\n",
      "Overall test accuracy: 97.48%\n"
     ]
    }
   ],
   "source": [
    "# Get predictions for test images\n",
    "X_test = test_images.reshape(test_images.shape[0], -1).T\n",
    "test_outputs, _ = mlp(X_test, w)\n",
    "predicted_labels = jnp.argmax(test_outputs, axis=0)\n",
    "\n",
    "# Create a figure with subplots for multiple test images\n",
    "n_samples = 5  # Number of test images to display\n",
    "fig, axes = plt.subplots(1, n_samples, figsize=(10, 3))\n",
    "\n",
    "# Plot each test image with true and predicted labels\n",
    "for i in range(n_samples):\n",
    "    axes[i].imshow(test_images[i], cmap='gray')\n",
    "    true_label = test_labels[i]\n",
    "    pred_label = int(predicted_labels[i])  # Convert from JAX array to integer\n",
    "    axes[i].set_title(f'Predicted label: {pred_label}')\n",
    "    axes[i].axis('off')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Print accuracy for these samples\n",
    "correct = (predicted_labels[:n_samples] == test_labels[:n_samples]).sum()\n",
    "print(f\"Accuracy on shown samples: {correct}/{n_samples}\")\n",
    "\n",
    "# Calculate and print overall test accuracy\n",
    "total_correct = (predicted_labels == test_labels).sum()\n",
    "total_samples = len(test_labels)\n",
    "print(f\"Overall test accuracy: {100 * total_correct/total_samples:.2f}%\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
